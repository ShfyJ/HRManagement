// <auto-generated />
using System;
using HRManagement.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace HRManagement.Data.Migrations
{
    [DbContext(typeof(HRManageDBContext))]
    [Migration("20210405104729_NewChangesToUserTable2")]
    partial class NewChangesToUserTable2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("HRManagement.Models.BusinessTrip", b =>
                {
                    b.Property<int>("BusinessTripId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("BusinessTripAddress")
                        .HasColumnType("text");

                    b.Property<int>("BusinessTripCountryId")
                        .HasColumnType("integer");

                    b.Property<int?>("BusinessTripDistrictId")
                        .HasColumnType("integer");

                    b.Property<string>("BusinessTripMission")
                        .HasColumnType("text");

                    b.Property<string>("BusinessTripProgramFileUrl")
                        .HasColumnType("text");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<string>("EmployeeId")
                        .HasColumnType("text");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SubstituteEmployeeId")
                        .HasColumnType("text");

                    b.HasKey("BusinessTripId");

                    b.HasIndex("BusinessTripCountryId");

                    b.HasIndex("BusinessTripDistrictId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("SubstituteEmployeeId");

                    b.ToTable("BusinessTrips");
                });

            modelBuilder.Entity("HRManagement.Models.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.HasKey("CountryId");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("HRManagement.Models.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("DepartmentName")
                        .HasColumnType("text");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("integer");

                    b.HasKey("DepartmentId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("HRManagement.Models.Disability", b =>
                {
                    b.Property<int>("DisabilityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("DisabilityName")
                        .HasColumnType("text");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.HasKey("DisabilityId");

                    b.ToTable("Disabilities");
                });

            modelBuilder.Entity("HRManagement.Models.DisciplinaryActionType", b =>
                {
                    b.Property<int>("DisciplinaryActionTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("DisciplinaryActionName")
                        .HasColumnType("text");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.HasKey("DisciplinaryActionTypeId");

                    b.ToTable("DisciplinaryActionTypes");
                });

            modelBuilder.Entity("HRManagement.Models.District", b =>
                {
                    b.Property<int>("DisrictId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CountryId")
                        .HasColumnType("integer");

                    b.Property<string>("DistrictName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RegionId")
                        .HasColumnType("integer");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.HasKey("DisrictId");

                    b.HasIndex("RegionId");

                    b.ToTable("Districts");
                });

            modelBuilder.Entity("HRManagement.Models.EdInformation", b =>
                {
                    b.Property<int>("EdInformationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("EdInformationName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.HasKey("EdInformationId");

                    b.ToTable("EdInformations");
                });

            modelBuilder.Entity("HRManagement.Models.Education", b =>
                {
                    b.Property<int>("EducationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("CountryId")
                        .HasColumnType("integer");

                    b.Property<string>("DiplomaUrl")
                        .HasColumnType("text");

                    b.Property<int?>("DistrictId")
                        .HasColumnType("integer");

                    b.Property<int?>("EdInformationId")
                        .HasColumnType("integer");

                    b.Property<string>("EdOrgAddress")
                        .HasColumnType("text");

                    b.Property<int?>("EdOrgCountryId")
                        .HasColumnType("integer");

                    b.Property<int?>("EdOrgDistrictId")
                        .HasColumnType("integer");

                    b.Property<string>("EdOrganizationName")
                        .HasColumnType("text");

                    b.Property<string>("EmployeeId")
                        .HasColumnType("text");

                    b.Property<DateTime>("EnteredDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("GraduatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("ScienceDegreeId")
                        .HasColumnType("integer");

                    b.Property<string>("Speciality")
                        .HasColumnType("text");

                    b.HasKey("EducationId");

                    b.HasIndex("CountryId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("EdInformationId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ScienceDegreeId");

                    b.ToTable("Educations");
                });

            modelBuilder.Entity("HRManagement.Models.EmployeeDisciplinaryAction", b =>
                {
                    b.Property<int>("EmployeeDisciplinaryActionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("DisciplinaryActionTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("EmployeeId")
                        .HasColumnType("text");

                    b.Property<DateTime>("OrderDateForAction")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("OrderFileUrl")
                        .HasColumnType("text");

                    b.Property<string>("OrderNumber")
                        .HasColumnType("text");

                    b.Property<string>("ReasonForAction")
                        .HasColumnType("text");

                    b.HasKey("EmployeeDisciplinaryActionId");

                    b.HasIndex("DisciplinaryActionTypeId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeDisciplinaryActions");
                });

            modelBuilder.Entity("HRManagement.Models.EmployeeVacation", b =>
                {
                    b.Property<int>("EmployeeVacationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ApplicationUrl")
                        .HasColumnType("text");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<string>("EmployeeId")
                        .HasColumnType("text");

                    b.Property<DateTime>("VacationEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("VacationPeriod")
                        .HasColumnType("text");

                    b.Property<DateTime>("VacationStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("VacationtypeId")
                        .HasColumnType("integer");

                    b.HasKey("EmployeeVacationId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("VacationtypeId");

                    b.ToTable("EmployeeVacations");
                });

            modelBuilder.Entity("HRManagement.Models.Group", b =>
                {
                    b.Property<int>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("GroupName")
                        .HasColumnType("text");

                    b.Property<int>("SectionId")
                        .HasColumnType("integer");

                    b.HasKey("GroupId");

                    b.HasIndex("SectionId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("HRManagement.Models.IndependentSection", b =>
                {
                    b.Property<int>("IndependentSectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("IndependentSectionName")
                        .HasColumnType("text");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("integer");

                    b.HasKey("IndependentSectionId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("IndependentSections");
                });

            modelBuilder.Entity("HRManagement.Models.Language", b =>
                {
                    b.Property<int>("LanguageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("LanguageName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.HasKey("LanguageId");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("HRManagement.Models.MilitaryServiceStatus", b =>
                {
                    b.Property<int>("MilitaryServiceStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("MilitaryServiceStatusName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.HasKey("MilitaryServiceStatusId");

                    b.ToTable("MilitaryServiceStatuses");
                });

            modelBuilder.Entity("HRManagement.Models.MilitaryTitle", b =>
                {
                    b.Property<int>("MilitaryTitleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("MilitaryTitleName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.HasKey("MilitaryTitleId");

                    b.ToTable("MilitaryTitles");
                });

            modelBuilder.Entity("HRManagement.Models.Nationality", b =>
                {
                    b.Property<int>("NationalityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("NationalityName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.HasKey("NationalityId");

                    b.ToTable("Nationalities");
                });

            modelBuilder.Entity("HRManagement.Models.Organization", b =>
                {
                    b.Property<int>("OrganizationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("OrganizationNameInEng")
                        .HasColumnType("text");

                    b.Property<string>("OrganizationNameInEngShort")
                        .HasColumnType("text");

                    b.Property<string>("OrganizationNameInKrillUz")
                        .HasColumnType("text");

                    b.Property<string>("OrganizationNameInKrillUzShort")
                        .HasColumnType("text");

                    b.Property<string>("OrganizationNameInLatinUz")
                        .HasColumnType("text");

                    b.Property<string>("OrganizationNameInLatinUzShort")
                        .HasColumnType("text");

                    b.Property<string>("OrganizationNameInRu")
                        .HasColumnType("text");

                    b.Property<string>("OrganizationNameInRuShort")
                        .HasColumnType("text");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.HasKey("OrganizationId");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("HRManagement.Models.Partisanship", b =>
                {
                    b.Property<int>("PartisanshipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("PartisanshipName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.HasKey("PartisanshipId");

                    b.ToTable("Partisanships");
                });

            modelBuilder.Entity("HRManagement.Models.Passport", b =>
                {
                    b.Property<int>("PassportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("GivenBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("GivenDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("PassportSeries")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("PassportId");

                    b.ToTable("Passports");
                });

            modelBuilder.Entity("HRManagement.Models.Position", b =>
                {
                    b.Property<int>("PositionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("PositionDegreeId")
                        .HasColumnType("integer");

                    b.Property<string>("PositionTypeInEng")
                        .HasColumnType("text");

                    b.Property<string>("PositionTypeInKrillUz")
                        .HasColumnType("text");

                    b.Property<string>("PositionTypeInLatinUz")
                        .HasColumnType("text");

                    b.Property<string>("PositionTypeInRu")
                        .HasColumnType("text");

                    b.Property<int>("SequenceNumber")
                        .HasColumnType("integer");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.HasKey("PositionId");

                    b.HasIndex("PositionDegreeId");

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("HRManagement.Models.PositionDegree", b =>
                {
                    b.Property<int>("PositionDegreeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("PositionDegreeName")
                        .HasColumnType("text");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.HasKey("PositionDegreeId");

                    b.ToTable("PositionDegrees");
                });

            modelBuilder.Entity("HRManagement.Models.Region", b =>
                {
                    b.Property<int>("RegionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CountryId")
                        .HasColumnType("integer");

                    b.Property<string>("RegionName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.HasKey("RegionId");

                    b.HasIndex("CountryId");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("HRManagement.Models.Relative", b =>
                {
                    b.Property<int>("RelativeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("RelativeName")
                        .HasColumnType("text");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.HasKey("RelativeId");

                    b.ToTable("Relatives");
                });

            modelBuilder.Entity("HRManagement.Models.RelativeWorkingStatus", b =>
                {
                    b.Property<int>("RelativeWorkingStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("RelativeWorkingStatusName")
                        .HasColumnType("text");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.HasKey("RelativeWorkingStatusId");

                    b.ToTable("RelativeWorkingStatuses");
                });

            modelBuilder.Entity("HRManagement.Models.ScienceDegree", b =>
                {
                    b.Property<int>("ScienceDegreeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ScienceDegreeName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.HasKey("ScienceDegreeId");

                    b.ToTable("ScienceDegrees");
                });

            modelBuilder.Entity("HRManagement.Models.Section", b =>
                {
                    b.Property<int>("SectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("integer");

                    b.Property<string>("SectionName")
                        .HasColumnType("text");

                    b.HasKey("SectionId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Sections");
                });

            modelBuilder.Entity("HRManagement.Models.UserRelative", b =>
                {
                    b.Property<int>("UserRelativesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("BirthCountryId")
                        .HasColumnType("integer");

                    b.Property<int?>("BirthDistrictId")
                        .HasColumnType("integer");

                    b.Property<string>("EmployeeId")
                        .HasColumnType("text");

                    b.Property<int?>("LivingCountryId")
                        .HasColumnType("integer");

                    b.Property<int?>("LivingDistrictId")
                        .HasColumnType("integer");

                    b.Property<int>("RelativeId")
                        .HasColumnType("integer");

                    b.Property<int>("RelativeWorkingStatusId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartedWorkingDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UserRelaivesBirthAddress")
                        .HasColumnType("text");

                    b.Property<string>("UserRelaivesLivingAddress")
                        .HasColumnType("text");

                    b.Property<DateTime>("UserRelativeBirthDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UserRelativeFullName")
                        .HasColumnType("text");

                    b.Property<string>("UserRelativesWorkingPlaceAndPosition")
                        .HasColumnType("text");

                    b.HasKey("UserRelativesId");

                    b.HasIndex("BirthCountryId");

                    b.HasIndex("BirthDistrictId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("LivingCountryId");

                    b.HasIndex("LivingDistrictId");

                    b.HasIndex("RelativeId");

                    b.HasIndex("RelativeWorkingStatusId");

                    b.ToTable("UserRelatives");
                });

            modelBuilder.Entity("HRManagement.Models.Users", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FIO_short")
                        .HasColumnType("text");

                    b.Property<string>("FI_short")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("Gender")
                        .HasColumnType("text");

                    b.Property<bool>("IsDismissed")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("MiddleName")
                        .HasColumnType("text");

                    b.Property<string>("OrderUrl")
                        .HasColumnType("text");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("text");

                    b.Property<string>("STIRUrl")
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.Property<string>("WorkbookURL")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("HRManagement.Models.Vacancy", b =>
                {
                    b.Property<int>("VacancyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("GroupId")
                        .HasColumnType("integer");

                    b.Property<int?>("IndependentSectionId")
                        .HasColumnType("integer");

                    b.Property<int>("PositionId")
                        .HasColumnType("integer");

                    b.HasKey("VacancyId");

                    b.HasIndex("GroupId");

                    b.HasIndex("IndependentSectionId");

                    b.HasIndex("PositionId");

                    b.ToTable("Vacancies");
                });

            modelBuilder.Entity("HRManagement.Models.VacationType", b =>
                {
                    b.Property<int>("VacationtypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.Property<string>("VacationTypeName")
                        .HasColumnType("text");

                    b.HasKey("VacationtypeId");

                    b.ToTable("VacationTypes");
                });

            modelBuilder.Entity("HRManagement.Models.WorkingActivity", b =>
                {
                    b.Property<int>("WorkingActivityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("EmployeeId")
                        .HasColumnType("text");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsNetworkExperience")
                        .HasColumnType("boolean");

                    b.Property<string>("OrganizationName")
                        .HasColumnType("text");

                    b.Property<string>("PositionName")
                        .HasColumnType("text");

                    b.Property<string>("PositionNameInFull")
                        .HasColumnType("text");

                    b.Property<string>("PositionType")
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("WorkingActivityId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("WorkingActivities");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("HRManagement.Models.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("CountryId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("DisabilityId")
                        .HasColumnType("integer");

                    b.Property<int?>("DistrictId")
                        .HasColumnType("integer");

                    b.Property<int?>("EdInformationId")
                        .HasColumnType("integer");

                    b.Property<string>("FIO_short")
                        .HasColumnType("text");

                    b.Property<string>("FI_short")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullAddress")
                        .HasColumnType("text");

                    b.Property<string>("Gender")
                        .HasColumnType("text");

                    b.Property<int?>("GroupId")
                        .HasColumnType("integer");

                    b.Property<int?>("IndependentSectionId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDismissed")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("MiddleName")
                        .HasColumnType("text");

                    b.Property<int?>("MilitaryServiceStatusId")
                        .HasColumnType("integer");

                    b.Property<int?>("MilitaryTitleId")
                        .HasColumnType("integer");

                    b.Property<int?>("NationalityId")
                        .HasColumnType("integer");

                    b.Property<string>("OrderUrl")
                        .HasColumnType("text");

                    b.Property<int?>("PartisanshipId")
                        .HasColumnType("integer");

                    b.Property<int?>("PassportId")
                        .HasColumnType("integer");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("text");

                    b.Property<int?>("PositionId")
                        .HasColumnType("integer");

                    b.Property<string>("STIRUrl")
                        .HasColumnType("text");

                    b.Property<int?>("ScienceDegreeId")
                        .HasColumnType("integer");

                    b.Property<int?>("SectionId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("WorkbookURL")
                        .HasColumnType("text");

                    b.HasIndex("CountryId");

                    b.HasIndex("DisabilityId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("EdInformationId");

                    b.HasIndex("GroupId");

                    b.HasIndex("IndependentSectionId");

                    b.HasIndex("MilitaryServiceStatusId");

                    b.HasIndex("MilitaryTitleId");

                    b.HasIndex("NationalityId");

                    b.HasIndex("PartisanshipId");

                    b.HasIndex("PassportId");

                    b.HasIndex("PositionId");

                    b.HasIndex("ScienceDegreeId");

                    b.HasIndex("SectionId");

                    b.HasDiscriminator().HasValue("ApplicationUser");
                });

            modelBuilder.Entity("HRManagement.Models.BusinessTrip", b =>
                {
                    b.HasOne("HRManagement.Models.Country", "BusinessTripCountry")
                        .WithMany()
                        .HasForeignKey("BusinessTripCountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HRManagement.Models.District", "BusinessTripDistrict")
                        .WithMany()
                        .HasForeignKey("BusinessTripDistrictId");

                    b.HasOne("HRManagement.Models.ApplicationUser", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");

                    b.HasOne("HRManagement.Models.ApplicationUser", "SubstituteEmployee")
                        .WithMany()
                        .HasForeignKey("SubstituteEmployeeId");

                    b.Navigation("BusinessTripCountry");

                    b.Navigation("BusinessTripDistrict");

                    b.Navigation("Employee");

                    b.Navigation("SubstituteEmployee");
                });

            modelBuilder.Entity("HRManagement.Models.Department", b =>
                {
                    b.HasOne("HRManagement.Models.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("HRManagement.Models.District", b =>
                {
                    b.HasOne("HRManagement.Models.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Region");
                });

            modelBuilder.Entity("HRManagement.Models.Education", b =>
                {
                    b.HasOne("HRManagement.Models.Country", "EdOrgCountry")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("HRManagement.Models.District", "EdOrgDistrict")
                        .WithMany()
                        .HasForeignKey("DistrictId");

                    b.HasOne("HRManagement.Models.EdInformation", "EdInformation")
                        .WithMany()
                        .HasForeignKey("EdInformationId");

                    b.HasOne("HRManagement.Models.ApplicationUser", "User")
                        .WithMany("Educations")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("HRManagement.Models.ScienceDegree", "ScienceDegree")
                        .WithMany()
                        .HasForeignKey("ScienceDegreeId");

                    b.Navigation("EdInformation");

                    b.Navigation("EdOrgCountry");

                    b.Navigation("EdOrgDistrict");

                    b.Navigation("ScienceDegree");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HRManagement.Models.EmployeeDisciplinaryAction", b =>
                {
                    b.HasOne("HRManagement.Models.DisciplinaryActionType", "DisciplinaryActionType")
                        .WithMany()
                        .HasForeignKey("DisciplinaryActionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HRManagement.Models.ApplicationUser", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");

                    b.Navigation("DisciplinaryActionType");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("HRManagement.Models.EmployeeVacation", b =>
                {
                    b.HasOne("HRManagement.Models.ApplicationUser", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");

                    b.HasOne("HRManagement.Models.VacationType", "Vacationtype")
                        .WithMany()
                        .HasForeignKey("VacationtypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Vacationtype");
                });

            modelBuilder.Entity("HRManagement.Models.Group", b =>
                {
                    b.HasOne("HRManagement.Models.Section", "Section")
                        .WithMany()
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Section");
                });

            modelBuilder.Entity("HRManagement.Models.IndependentSection", b =>
                {
                    b.HasOne("HRManagement.Models.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("HRManagement.Models.Position", b =>
                {
                    b.HasOne("HRManagement.Models.PositionDegree", "PositionDegree")
                        .WithMany()
                        .HasForeignKey("PositionDegreeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PositionDegree");
                });

            modelBuilder.Entity("HRManagement.Models.Region", b =>
                {
                    b.HasOne("HRManagement.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("HRManagement.Models.Section", b =>
                {
                    b.HasOne("HRManagement.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("HRManagement.Models.UserRelative", b =>
                {
                    b.HasOne("HRManagement.Models.Country", "BirthCountry")
                        .WithMany()
                        .HasForeignKey("BirthCountryId");

                    b.HasOne("HRManagement.Models.District", "BirthDistrict")
                        .WithMany()
                        .HasForeignKey("BirthDistrictId");

                    b.HasOne("HRManagement.Models.ApplicationUser", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");

                    b.HasOne("HRManagement.Models.Country", "LivingCountry")
                        .WithMany()
                        .HasForeignKey("LivingCountryId");

                    b.HasOne("HRManagement.Models.District", "LivingDistrict")
                        .WithMany()
                        .HasForeignKey("LivingDistrictId");

                    b.HasOne("HRManagement.Models.Relative", "Relative")
                        .WithMany()
                        .HasForeignKey("RelativeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HRManagement.Models.RelativeWorkingStatus", "RelativeWorkingStatus")
                        .WithMany()
                        .HasForeignKey("RelativeWorkingStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BirthCountry");

                    b.Navigation("BirthDistrict");

                    b.Navigation("Employee");

                    b.Navigation("LivingCountry");

                    b.Navigation("LivingDistrict");

                    b.Navigation("Relative");

                    b.Navigation("RelativeWorkingStatus");
                });

            modelBuilder.Entity("HRManagement.Models.Vacancy", b =>
                {
                    b.HasOne("HRManagement.Models.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId");

                    b.HasOne("HRManagement.Models.IndependentSection", "IndependentSection")
                        .WithMany()
                        .HasForeignKey("IndependentSectionId");

                    b.HasOne("HRManagement.Models.Position", "Position")
                        .WithMany()
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("IndependentSection");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("HRManagement.Models.WorkingActivity", b =>
                {
                    b.HasOne("HRManagement.Models.ApplicationUser", "User")
                        .WithMany("WorkingActivities")
                        .HasForeignKey("EmployeeId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HRManagement.Models.ApplicationUser", b =>
                {
                    b.HasOne("HRManagement.Models.Country", "BirthCountry")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("HRManagement.Models.Disability", "Disability")
                        .WithMany()
                        .HasForeignKey("DisabilityId");

                    b.HasOne("HRManagement.Models.District", "BirthDistrict")
                        .WithMany()
                        .HasForeignKey("DistrictId");

                    b.HasOne("HRManagement.Models.EdInformation", "EdInformation")
                        .WithMany()
                        .HasForeignKey("EdInformationId");

                    b.HasOne("HRManagement.Models.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId");

                    b.HasOne("HRManagement.Models.IndependentSection", "IndependentSection")
                        .WithMany()
                        .HasForeignKey("IndependentSectionId");

                    b.HasOne("HRManagement.Models.MilitaryServiceStatus", "MilitaryServiceStatus")
                        .WithMany()
                        .HasForeignKey("MilitaryServiceStatusId");

                    b.HasOne("HRManagement.Models.MilitaryTitle", "MilitaryTitle")
                        .WithMany()
                        .HasForeignKey("MilitaryTitleId");

                    b.HasOne("HRManagement.Models.Nationality", "Nationality")
                        .WithMany()
                        .HasForeignKey("NationalityId");

                    b.HasOne("HRManagement.Models.Partisanship", "Partisanship")
                        .WithMany()
                        .HasForeignKey("PartisanshipId");

                    b.HasOne("HRManagement.Models.Passport", "Passport")
                        .WithMany()
                        .HasForeignKey("PassportId");

                    b.HasOne("HRManagement.Models.Position", "Position")
                        .WithMany()
                        .HasForeignKey("PositionId");

                    b.HasOne("HRManagement.Models.ScienceDegree", "ScienceDegree")
                        .WithMany()
                        .HasForeignKey("ScienceDegreeId");

                    b.HasOne("HRManagement.Models.Section", "Section")
                        .WithMany()
                        .HasForeignKey("SectionId");

                    b.Navigation("BirthCountry");

                    b.Navigation("BirthDistrict");

                    b.Navigation("Disability");

                    b.Navigation("EdInformation");

                    b.Navigation("Group");

                    b.Navigation("IndependentSection");

                    b.Navigation("MilitaryServiceStatus");

                    b.Navigation("MilitaryTitle");

                    b.Navigation("Nationality");

                    b.Navigation("Partisanship");

                    b.Navigation("Passport");

                    b.Navigation("Position");

                    b.Navigation("ScienceDegree");

                    b.Navigation("Section");
                });

            modelBuilder.Entity("HRManagement.Models.ApplicationUser", b =>
                {
                    b.Navigation("Educations");

                    b.Navigation("WorkingActivities");
                });
#pragma warning restore 612, 618
        }
    }
}
